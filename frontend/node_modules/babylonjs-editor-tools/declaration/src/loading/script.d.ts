import { Scene } from "@babylonjs/core/scene";
import { IScript } from "../script";
import { ScriptMap } from "./loader";
/**
 * @internal
 */
export declare function _applyScriptsForObject(scene: Scene, object: any, scriptsMap: ScriptMap, rootUrl: string): void;
export interface IRegisteredScript {
    /**
     * Defines the key of the script. Refer to scriptMap.
     */
    key: string;
    /**
     * Defines the instance of the script that was created while loading the scene.
     */
    instance: IScript;
}
/**
 * When a scene is being loaded, scripts that were attached to objects in the scene using the Editor are processed.
 * This function registers the instance of scripts per object in order to retrieve them later.
 * @param object defines the object in the scene on which the script is attached to.
 * @param scriptInstance defines the instance of the script to register.
 * @param key defines the key of the script. This value is used to identify the script.
 */
export declare function registerScriptInstance(object: any, scriptInstance: IScript, key: string): void;
/**
 * Returns all the instances of the script attached to the given object that matches the given class type.
 * The same script can be attached multiple times to the same object. If you ensure that ONLY DISTINCT scripts
 * are attached to the object, you can use `getScriptByClassForObject` which will return the unique instance for the given object.
 * @param object defines the reference to the object where the script to retrieve is attached to.
 * @param classType defines the class of the type to retrieve
 * @example
 * import { IScript, getAllScriptsByClassForObject } from "babylonjs-editor-tools";
 *
 * class ScriptClass implements IScript {
 * 	public onStart(): void {
 * 		const instances = getAllScriptsByClassForObject(mesh, OtherScriptClass);
 * 		instances.forEach((i) => {
 * 			i.doSomething();
 * 		});
 * 	}
 * }
 *
 * class OtherScriptClass implements IScript {
 * 	public doSomething(): void {
 * 		console.log("Doing something!");
 * 	}
 * }
 */
export declare function getAllScriptsByClassForObject<T extends new (...args: any) => any>(object: any, classType: T): InstanceType<T>[];
/**
 * Returns the instance of the script attached to the given object that matches the given class type.
 * @param object defines the reference to the object where the script to retrieve is attached to.
 * @param classType defines the class of the type to retrieve
 * @example
 * import { IScript, getScriptByClassForObject } from "babylonjs-editor-tools";
 *
 * class ScriptClass implements IScript {
 * 	public onStart(): void {
 * 		const instance = getScriptByClassForObject(mesh, OtherScriptClass);
 * 		instance.doSomething();
 * 	}
 * }
 *
 * class OtherScriptClass implements IScript {
 * 	public doSomething(): void {
 * 		console.log("Doing something!");
 * 	}
 * }
 */
export declare function getScriptByClassForObject<T extends new (...args: any) => any>(object: any, classType: T): NonNullable<InstanceType<T>> | null;
