import { Scene } from "@babylonjs/core/scene";
import "./sound";
import "./texture";
/**
 * Defines the possible output type of a script.
 * `default` is a class that will be instantiated with the object as parameter.
 * `onStart` is a function that will be called once before the first render passing the reference to the object the script is attached to.
 * `onUpdate` is a function that will be called every frame passing the reference to the object the script is attached to
 */
export type ScriptMap = Record<string, {
    default?: new (object: any) => {
        onStart?(): void;
        onUpdate?(): void;
    };
    onStart?: (object: any) => void;
    onUpdate?: (object: any) => void;
}>;
/**
 * Defines the overall desired quality of the scene.
 * In other words, defines the quality of textures that will be loaded in terms of dimensions.
 * The editor computes automatic "high (untouched)", "medium (half)", and "low (quarter)" quality levels for textures.
 * Using "medium" or "low" quality levels will reduce the memory usage and improve the performance of the scene
 * especially on mobiles where memory is limited.
 */
export type SceneLoaderQualitySelector = "low" | "medium" | "high";
export type SceneLoaderOptions = {
    /**
     * Defines the quality of the scene.
     * This will affect the quality of textures that will be loaded in terms of dimensions.
     * The editor computes automatic "high (untouched)", "medium (half)", and "low (quarter)" quality levels for textures.
     * Using "medium" or "low" quality levels will reduce the memory usage and improve the performance of the scene
     * especially on mobiles where memory is limited.
     */
    quality?: SceneLoaderQualitySelector;
    /**
     * Defines the function called to notify the loading progress in interval [0, 1]
     */
    onProgress?: (value: number) => void;
};
declare module "@babylonjs/core/scene" {
    interface Scene {
        loadingQuality: SceneLoaderQualitySelector;
    }
}
export declare function loadScene(rootUrl: any, sceneFilename: string, scene: Scene, scriptsMap: ScriptMap, options?: SceneLoaderOptions): Promise<void>;
