/**
 * Returns wether or not the given object is an AbstractMesh.
 * @param object defines the reference to the object to test its class name.
 */
export function isAbstractMesh(object) {
    switch (object.getClassName?.()) {
        case "Mesh":
        case "LineMesh":
        case "GroundMesh":
        case "InstancedMesh":
            return true;
    }
    return false;
}
/**
 * Returns wether or not the given object is a Mesh.
 * @param object defines the reference to the object to test its class name.
 */
export function isMesh(object) {
    switch (object.getClassName?.()) {
        case "Mesh":
        case "GroundMesh":
            return true;
    }
    return false;
}
/**
 * Returns wether or not the given object is a InstancedMesh.
 * @param object defines the reference to the object to test its class name.
 */
export function isInstancedMesh(object) {
    return object.getClassName?.() === "InstancedMesh";
}
/**
 * Returns wether or not the given object is a Bone.
 * @param object defines the reference to the object to test its class name.
 */
export function isBone(object) {
    return object.getClassName?.() === "Bone";
}
/**
 * Returns wether or not the given object is a GroundMesh.
 * @param object defines the reference to the object to test its class name.
 */
export function isGroundMesh(object) {
    return object.getClassName?.() === "GroundMesh";
}
/**
 * Returns wether or not the given object is a TransformNode.
 * @param object defines the reference to the object to test its class name.
 */
export function isTransformNode(object) {
    return object.getClassName?.() === "TransformNode";
}
/**
 * Returns wether or not the given object is a Texture.
 * @param object defines the reference to the object to test its class name.
 */
export function isTexture(object) {
    return object?.getClassName?.() === "Texture";
}
/**
 * Returns wether or not the given object is a Camera.
 * @param object defines the reference to the object to test its class name.
 */
export function isCamera(object) {
    switch (object.getClassName?.()) {
        case "Camera":
        case "FreeCamera":
        case "TargetCamera":
        case "EditorCamera":
        case "ArcRotateCamera":
        case "UniversalCamera":
            return true;
    }
    return false;
}
/**
 * Returns wether or not the given object is a FreeCamera.
 * @param object defines the reference to the object to test its class name.
 */
export function isFreeCamera(object) {
    switch (object.getClassName?.()) {
        case "FreeCamera":
        case "UniversalCamera":
            return true;
    }
    return false;
}
/**
 * Returns wether or not the given object is a ArcRotateCamera.
 * @param object defines the reference to the object to test its class name.
 */
export function isArcRotateCamera(object) {
    return object.getClassName?.() === "ArcRotateCamera";
}
/**
 * Returns wether or not the given object is a PointLight.
 * @param object defines the reference to the object to test its class name.
 */
export function isPointLight(object) {
    return object.getClassName?.() === "PointLight";
}
/**
 * Returns wether or not the given object is a DirectionalLight.
 * @param object defines the reference to the object to test its class name.
 */
export function isDirectionalLight(object) {
    return object.getClassName?.() === "DirectionalLight";
}
/**
 * Returns wether or not the given object is a SpotLight.
 * @param object defines the reference to the object to test its class name.
 */
export function isSpotLight(object) {
    return object.getClassName?.() === "SpotLight";
}
/**
 * Returns wether or not the given object is a HemisphericLight.
 * @param object defines the reference to the object to test its class name.
 */
export function isHemisphericLight(object) {
    return object.getClassName?.() === "HemisphericLight";
}
/**
 * Returns wether or not the given object is a Light.
 * @param object defines the reference to the object to test its class name.
 */
export function isLight(object) {
    switch (object.getClassName?.()) {
        case "Light":
        case "PointLight":
        case "SpotLight":
        case "DirectionalLight":
        case "HemisphericLight":
            return true;
    }
    return false;
}
/**
 * Returns wether or not the given object is a Node.
 * @param object defines the reference to the object to test its class name.
 */
export function isNode(object) {
    return isAbstractMesh(object) || isTransformNode(object) || isLight(object) || isCamera(object);
}
/**
 * Returns wether or not the given object is a Scene.
 * @param object defines the reference to the object to test its class name.
 */
export function isScene(object) {
    return object.getClassName?.() === "Scene";
}
/**
 * Returns wether or not the given object is a ParticleSystem.
 * @param object defines the reference to the object to test its class name.
 */
export function isParticleSystem(object) {
    return object.getClassName?.() === "ParticleSystem";
}
/**
 * Returns wether or not the given object is a GPUParticleSystem.
 * @param object defines the reference to the object to test its class name.
 */
export function isGPUParticleSystem(object) {
    return object.getClassName?.() === "GPUParticleSystem";
}
/**
 * Returns wether or not the given object is a IParticleSystem.
 * @param object defines the reference to the object to test its class name.
 */
export function isAnyParticleSystem(object) {
    switch (object.getClassName?.()) {
        case "ParticleSystem":
        case "GPUParticleSystem":
            return true;
    }
    return false;
}
//# sourceMappingURL=guards.js.map