import { MotionBlurPostProcess } from "@babylonjs/core/PostProcesses/motionBlurPostProcess";
let motionBlurPostProcess = null;
/**
 * Defines the configuration of the motion blur post-process per camera.
 */
export const motionBlurPostProcessCameraConfigurations = new Map();
export function getMotionBlurPostProcess() {
    return motionBlurPostProcess;
}
/**
 * Sets the reference to the motion blur post-process.
 * @access editor only.
 */
export function setMotionBlurPostProcessRef(postProcess) {
    motionBlurPostProcess = postProcess;
}
export function disposeMotionBlurPostProcess() {
    if (motionBlurPostProcess) {
        motionBlurPostProcess.dispose();
        motionBlurPostProcess = null;
    }
}
export function createMotionBlurPostProcess(scene, camera) {
    motionBlurPostProcess = new MotionBlurPostProcess("MotionBlurPostProcess", scene, 1.0, camera);
    motionBlurPostProcess.motionStrength = 1.0;
    motionBlurPostProcess.isObjectBased = true;
    return motionBlurPostProcess;
}
export function serializeMotionBlurPostProcess() {
    if (!motionBlurPostProcess) {
        return null;
    }
    return {
        isObjectBased: motionBlurPostProcess.isObjectBased,
        motionStrength: motionBlurPostProcess.motionStrength,
        motionBlurSamples: motionBlurPostProcess.motionBlurSamples,
    };
}
export function parseMotionBlurPostProcess(scene, camera, data) {
    if (motionBlurPostProcess) {
        return motionBlurPostProcess;
    }
    const postProcess = createMotionBlurPostProcess(scene, camera);
    postProcess.isObjectBased = data.isObjectBased;
    postProcess.motionStrength = data.motionStrength;
    postProcess.motionBlurSamples = data.motionBlurSamples;
    return postProcess;
}
//# sourceMappingURL=motion-blur.js.map